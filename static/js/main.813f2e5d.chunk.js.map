{"version":3,"sources":["FormDialog.js","Header.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["FormDialog","state","mapOnInfo","changeBacground","title","notes","selectedDate","setSelectedDate","handleDateChange","date","console","log","setState","handleSubmit","handleChangeEvent","props","handlecolorChange","event","value","target","handleChange","name","handleFullWidthChange","color","setFullWidth","checked","this","handleClose","setOpen","fullWidth","handleDelete","Dialog","open","onClose","aria-labelledby","DialogContent","className","type","onClick","TextField","autoFocus","margin","id","label","onChange","MuiPickersUtilsProvider","utils","DateFnsUtils","Grid","container","justify","disableToolbar","variant","format","KeyboardButtonProps","DialogActions","Button","classname","React","Component","Header","src","alt","placeholder","Main","DemoApp","calendarEvents","prevState","map","end","handleEvent","info","eventObj","eventUnic","find","a","allDay","jsEvent","preventDefault","filter","todo","handleDateClick","arg","dayEl","style","timeZone","start","Date","now","bacground","handleClickOpen","localStorage","getItem","JSON","parse","setItem","stringify","defaultView","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","listPlugin","bootstrapPlugin","events","dateClick","eventClick","eventLimit","header","left","center","right","buttonText","prevYear","prev","next","today","month","week","day","list","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.813f2e5d.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport './FormDialog.css';\n\nexport default class FormDialog extends React.Component {\n  state = {\n    mapOnInfo: { \n      changeBacground: 'black',\n      title: '',\n      notes: '',\n      selectedDate: '',\n      setSelectedDate: '',\n    }\n  }\n\n  handleDateChange = (date) => {\n    console.log(date)\n    this.setState({\n      mapOnInfo: { \n        changeBacground: 'black',\n        title: '',\n        selectedDate: date,\n        // setSelectedDate: date,\n      }\n    });\n  }\n\n  handleSubmit = () => {\n    const { handleChangeEvent } = this.props;\n    const { mapOnInfo } = this.state;\n    handleChangeEvent(mapOnInfo);\n  }\n    \n  handlecolorChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      mapOnInfo: {\n        title: '',\n        changeBacground: value,\n        selectedDate: '',\n        notes: '',\n        setSelectedDate: '',\n      },\n    })\n  }\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      mapOnInfo: {\n        changeBacground: 'white',\n        [name]: value,\n        selectedDate: '',\n        notes: '',\n        setSelectedDate: '',\n      },\n    });\n  }\n\n  handleFullWidthChange = (event) => {\n    this.setState({\n      mapOnInfo: {\n        \n        color: 'black',\n        changeBacground: 'white',\n        title: '',\n        setFullWidth: event.target.checked,\n        selectedDate: '',\n        notes: '',\n        setSelectedDate: '',\n      },\n    })\n  }\n\n  render() {\n    const { handleClose, setOpen, handleChangeEvent, fullWidth, color, handleDelete } = this.props;\n\n    return (\n      <div>\n        <Dialog \n          handleChangeEvent={handleChangeEvent}\n          open={setOpen} \n          onClose={handleClose} \n          fullWidth={fullWidth}\n          color={color}\n          aria-labelledby=\"max-width-dialog-title\"\n        >\n          <DialogContent>\n            <button className=\"dialog__button\" type='button' onClick={handleClose}>x</button>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"event name\"\n              onChange={this.handleChange}\n              value={this.state.title}\n              name=\"title\"\n              type=\"text\"\n              fullWidth\n            />\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Grid container justify=\"space-around\">\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          margin=\"normal\"\n          name=\"selectedDate\"\n          id=\"date-picker-inline\"\n          label=\"event date\"\n          value={this.state.selectedDate}\n          onChange={this.state.handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        </Grid>\n    </MuiPickersUtilsProvider>\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Grid container justify=\"space-around\">\n          <KeyboardTimePicker\n            margin=\"normal\"\n            id=\"time-picker\"\n            label=\"event time\"\n            name=\"setSelectedDate\"\n            value={this.state.setSelectedDate}\n            onChange={this.handleDateChange}\n            KeyboardButtonProps={{\n              'aria-label': 'event time',\n            }}\n          />\n      </Grid>\n    </MuiPickersUtilsProvider>\n    <TextField\n      autoFocus\n      margin=\"dense\"\n      id=\"name\"\n      label=\"notes\"\n      onChange={this.handleChange}\n      value={this.state.notes}\n      name=\"notes\"\n      type=\"text\"\n      fullWidth\n    />\n      </DialogContent>\n          <DialogActions>\n            <Button \n            onClick={() => handleDelete()} \n            color=\"primary\"\n            classname=\"button__Cansel\">\n              Cancel\n            </Button>\n            <button \n              onClick={this.handleSubmit}\n              className=\"button__Save\"\n            >\n              Save\n            </button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => (\n  <div>\n    <header className=\"header\">\n    <div className=\"header__search__title\">impekable</div>\n    <div className=\"header__search__input\">\n      <div className=\"header__serch__container\">\n        <img\n          src=\"img/icon_search.svg\"\n          alt=\"search\"\n          className=\"header__search\"\n        />\n        <input\n          name=\"search\"\n          type=\"text\"\n          className=\"n__header__input\"\n          placeholder=\"Search transactions, invoices or help\"\n        />\n        </div>\n      </div>\n\n      <img alt=\"planet\" className=\"header__planet hide\" src=\"img/SupportIocn.svg\" />\n      <img alt=\"planet\" className=\"header__avatar hide\" src=\"img/Avatar@2x.png\" />\n      <img alt=\"path\" className=\"header__planet hide\" src=\"img/Path_9.svg\" />\n      <img alt=\"planet\" className=\"header__planet hide\" src=\"img/Path_3.svg\" />\n      <img alt=\"planet\" className=\"header__planet hide\" src=\"img/Divider.svg\" />\n      <p className=\"header__name\">John Doe</p>\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/Path_26.svg\" />\n      <img alt=\"planet\" className=\"header__avatar\" src=\"img/Avatar@2x.png\" />\n    </header>\n    <div className=\"main\" />\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport './Main.css';\n\nconst Main = () => (\n  <div className=\"main\">\n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Home\n    </div>\n    \n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Dashboard\n    </div>\n    \n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Inbox\n    </div>\n    \n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Products\n    </div>\n    \n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Invoices\n    </div>\n    \n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Customers\n    </div>\n    \n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Chat Room\n    </div>\n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Calendar\n    </div>\n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Help Center\n    </div>\n    <div className=\"main__search__input\">\n      <img\n        src=\"img/icon_search.svg\"\n        alt=\"search\"\n        className=\"main__search\"\n      />\n      Settings\n    </div>\n  </div>\n);\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport FormDialog from './FormDialog';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport FullCalendar from '@fullcalendar/react';\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport Header from './Header';\nimport Main from './Main';\n\nimport './App.css';\n\nexport default class DemoApp extends React.Component {\n  state = {\n    setOpen: false,\n    open: false, \n    calendarEvents: [],\n    id: '',\n    color: '',\n  }\n\n  componentWillMount() {\n      if (localStorage.getItem('calendarEvents')) {\n        this.setState({\n          calendarEvents: JSON.parse(localStorage.getItem('calendarEvents')),\n        });\n      }\n    }\n  \n    componentDidUpdate() {\n      localStorage.setItem('calendarEvents', JSON.stringify(this.state.calendarEvents));\n    }\n\n  handleChangeEvent = (mapOnInfo) => {\n    console.log(mapOnInfo)\n    this.setState((prevState) => {\n      const calendarEvents = prevState.calendarEvents\n        .map(event => (event.id === prevState.id\n          ? {\n            ...event,\n            title: mapOnInfo.title,\n            end: mapOnInfo.setSelectedDate,\n            notes: mapOnInfo.notes,\n            // start: mapOnInfo.selectedDate,\n          }\n          : event));\n      return {\n        color: mapOnInfo.changeBacground,\n        setOpen: false,\n        calendarEvents,\n      };\n    })\n  }\n\n  handleEvent = (info) => {\n    const eventObj = info.event;\n    const id = this.state.calendarEvents.map(eventUnic => eventUnic.id === +info.event.id ? eventUnic.id : '').find(a => a === +info.event.id);\n      if (eventObj.allDay) {\n        this.setState({\n          setOpen: true,\n          id,\n          })\n        info.jsEvent.preventDefault();\n      } \n  }\n\n  handleDelete = () => {\n    this.setState(prevState => ({\n      setOpen: false,\n      calendarEvents: prevState.calendarEvents.filter(todo => todo.id !== prevState.id),\n    }));\n  }\n\n  handleDateClick = (arg) => {\n    console.log(arg.dayEl.style)\n    this.setState(prevState => ({\n      calendarEvents: [\n        ...prevState.calendarEvents,\n        {\n          timeZone: 'local',\n          title: '',\n          notes: '',\n          start: arg.date,\n          allDay: arg.allDay,\n          end: arg.date,\n          id: Date.now(),\n          bacground: arg.dayEl.style.color = prevState.color,\n        },\n      ],\n    }));\n  }\n\n  handleClickOpen = () => {\n    this.setState({\n      setOpen: true,\n    })\n  }\n\n  handleClose = () =>{\n    this.setState({\n      setOpen: false,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"main__container\">\n        <Main />\n        {/* <h2 className=\"main__calendar\">Calendar View</h2> */}\n        <FullCalendar \n          defaultView=\"dayGridMonth\" \n          plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin, bootstrapPlugin]}\n          events={this.state.calendarEvents} \n          dateClick={this.handleDateClick}\n          eventClick={this.handleEvent}\n          eventLimit= 'true'\n          header={{\n            left: '\" \" today,prev,next', \n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',\n          }}\n          \n          buttonText={{\n            prevYear: '', \n            prev: 'Back',\n            next: 'Next',\n            today: 'Today',\n            month: 'Month',\n            week: 'Week',\n            day: 'Day',\n            list: 'Agenda',\n        }}\n        />\n      \n        <FormDialog \n          handleChangeEvent={this.handleChangeEvent}\n          handleClose={this.handleClose} \n          id={this.state.calendarEvents.map(event => event.id)} \n          setOpen={this.state.setOpen}\n          handleDelete={this.handleDelete}\n        />\n          </div>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}