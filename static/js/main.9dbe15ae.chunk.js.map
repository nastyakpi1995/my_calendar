{"version":3,"sources":["FormDialog.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["FormDialog","state","mapOnInfo","fullWidth","setFullWidth","maxWidth","setMaxWidth","title","handleSubmit","props","onSubmit","id","handleMaxWidthChange","event","value","target","setState","handleFullWidthChange","checked","this","handleClose","setOpen","handleChangeEvent","handleDelete","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","onCange","noValidate","FormControl","InputLabel","htmlFor","Select","onChange","inputProps","name","MenuItem","FormControlLabel","control","Switch","DialogActions","Button","onClick","color","React","Component","Header","className","src","alt","placeholder","DemoApp","calendarEvents","console","log","prevState","calendarEvent","map","eventUnic","filter","todo","handleEvent","info","eventObj","find","a","allDay","jsEvent","preventDefault","handleDateClick","arg","timeZone","start","date","end","Date","now","bacground","dayEl","style","backgroundColor","handleClickOpen","localStorage","getItem","JSON","parse","setItem","stringify","defaultView","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","listPlugin","events","dateClick","eventClick","header","left","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dbe15ae.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nexport default class FormDialog extends React.Component {\n  state = {\n    mapOnInfo: { \n      fullWidth: true,\n      setFullWidth: true,\n      maxWidth: 'sm',\n      setMaxWidth: 'sm',\n      title: '',\n    }\n  }\n\n  handleSubmit = () => {\n    const { onSubmit, id } = this.props;\n    const { mapOnInfo } = this.state;\n    onSubmit(mapOnInfo, id);\n  }\n    \n  handleMaxWidthChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      mapOnInfo: {\n        setMaxWidth: value,\n      },\n    })\n  }\n\n  handleFullWidthChange = (event) => {\n    this.setState({\n      mapOnInfo: {\n        setFullWidth: event.target.checked,\n      },\n    })\n  }\n\n  render() {\n    const { handleClose, setOpen, handleChangeEvent, fullWidth, maxWidth, handleDelete, id } = this.props;\n\n    return (\n      <div>\n        <Dialog \n          handleChangeEvent={handleChangeEvent}\n          open={setOpen} \n          onClose={handleClose} \n          fullWidth={fullWidth}\n          maxWidth={maxWidth}\n          aria-labelledby=\"max-width-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">New Event</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              To subscribe \n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Entered your event\"\n              type=\"email\"\n              fullWidth\n            />\n             <form \n              onCange={this.handleSubmit}\n              noValidate>\n              <FormControl>\n                <InputLabel htmlFor=\"max-width\">maxWidth</InputLabel>\n                <Select\n                  value={maxWidth}\n                  onChange={this.handleMaxWidthChange}\n                  inputProps={{\n                    name: 'max-width',\n                    id: 'max-width',\n                  }}\n                >\n                  <MenuItem value={false}>false</MenuItem>\n                  <MenuItem value=\"xs\">xs</MenuItem>\n                  <MenuItem value=\"sm\">sm</MenuItem>\n                  <MenuItem value=\"md\">md</MenuItem>\n                  <MenuItem value=\"lg\">lg</MenuItem>\n                  <MenuItem value=\"xl\">xl</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControlLabel\n                control={\n                  <Switch checked={this.fullWidth} onChange={this.handleFullWidthChange} value=\"title\" />\n                }\n                label=\"Full width\"\n              />\n            </form>\n          </DialogContent>\n          <DialogActions>\n            <Button \n            onClick={() => handleDelete(id)} \n            color=\"primary\">\n              Delete\n            </Button>\n            <Button \n              onClick={this.handleSubmit}\n              color=\"primary\"\n            >\n              Subscribe\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => (\n  <div>\n    <header className=\"header\">\n      <div className=\"header__search__input\">\n        <img\n          src=\"img/icon_search.svg\"\n          alt=\"search\"\n          className=\"header__search\"\n        />\n        <input\n          name=\"search\"\n          type=\"text\"\n          className=\"n__header__input\"\n          placeholder=\"Search transactions, invoices or help\"\n        />\n      </div>\n\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/SupportIocn.svg\" />\n      <img alt=\"path\" className=\"header__planet\" src=\"img/Path_9.svg\" />\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/Path_3.svg\" />\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/Divider.svg\" />\n      <p className=\"header__name\">John Doe</p>\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/Path_26.svg\" />\n      <img alt=\"planet\" className=\"header__avatar\" src=\"img/Avatar@2x.png\" />\n    </header>\n    <div className=\"main\" />\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport FormDialog from './FormDialog';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport FullCalendar from '@fullcalendar/react';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport Header from './Header';\n\nimport './App.css';\n\nexport default class DemoApp extends React.Component {\n  state = {\n    setOpen: false,\n    open: false, \n    calendarEvents: [],\n    id: '',\n  }\n\n  componentWillMount() {\n      if (localStorage.getItem('calendarEvents')) {\n        this.setState({\n          calendarEvents: JSON.parse(localStorage.getItem('calendarEvents')),\n        });\n      }\n    }\n  \n    componentDidUpdate() {\n      localStorage.setItem('calendarEvents', JSON.stringify(this.state.calendarEvents));\n    }\n\n  handleChangeEvent = (mapOnInfo) => {\n    console.log(mapOnInfo.title)\n    this.setState(prevState => ({\n      calendarEvent: prevState.calendarEvents.map(\n        eventUnic => ({ \n        ...eventUnic, \n        title: eventUnic.id === prevState.id ? mapOnInfo.title : eventUnic.title,\n        })),\n      setOpen: false,\n    }));  \n  }\n\n  \n  handleDelete = () => {\n    this.setState(prevState => ({\n      setOpen: false,\n      calendarEvents: prevState.calendarEvents.filter(todo => todo.id !== prevState.id),\n    }));\n  }\n\n  handleEvent = (info) => {\n    const eventObj = info.event;\n    const id = this.state.calendarEvents.map(eventUnic => eventUnic.id === eventObj.id ? eventUnic.id : '').find(a => a === eventObj.id);\n\n      if (eventObj.allDay) {\n        this.setState(prevState => ({\n          setOpen: true,\n          id,\n          // calendarEvents: prevState.calendarEvents.map(\n          // eventUnic => ({ \n          // ...eventUnic, \n          // title: eventUnic.id === +info.event.id ? Date.now() : eventUnic.title}))\n          }))\n          // handleChangeEvent(id)\n\n        info.jsEvent.preventDefault();\n      } else {\n          this.setState({\n            setOpen: false,\n          });\n      }\n  }\n\n  handleDateClick = (arg) => {\n    this.setState(prevState => ({\n      calendarEvents: [\n        ...prevState.calendarEvents,\n        {\n          timeZone: 'local',\n          title: prevState.title,\n          start: arg.date,\n          allDay: arg.allDay,\n          end: new Date(),\n          id: Date.now(),\n          bacground: arg.dayEl.style.backgroundColor = 'blue',\n        },\n      ],\n    }));\n  }\n\n  handleClickOpen = () => {\n    this.setState({\n      setOpen: true,\n    })\n  }\n\n  handleClose = () =>{\n    this.setState({\n      setOpen: false,\n    })\n  }\n\n  render() {\n    console.log(this.state.calendarEvents)\n    return (\n      <div className=\"App\">\n        <Header />\n        <FullCalendar \n          defaultView=\"dayGridMonth\" \n          plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin]}\n          events={this.state.calendarEvents} \n          dateClick={this.handleDateClick}\n          eventClick={this.handleEvent}\n          header={{\n            left: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',\n          }}\n        />\n        <FormDialog \n          onSubmit={this.handleChangeEvent}\n          handleClose={this.handleClose} \n          id={this.state.calendarEvents.map(event => event.id)} \n          setOpen={this.state.setOpen}\n          handleDelete={this.handleDelete}\n        />\n        <button type=\"button\" onClick={this.handleDelete} >fdsfd</button>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}