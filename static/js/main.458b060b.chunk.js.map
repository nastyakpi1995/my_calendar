{"version":3,"sources":["FormDialog.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["FormDialog","state","mapOnInfo","fullWidth","setFullWidth","color","changeBacground","title","handleSubmit","handleChangeEvent","props","console","log","handlecolorChange","event","value","target","setState","handleChange","name","handleFullWidthChange","checked","this","handleClose","setOpen","handleDelete","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","onChange","type","onCange","noValidate","FormControl","InputLabel","htmlFor","Select","inputProps","MenuItem","FormControlLabel","control","Switch","DialogActions","Button","onClick","React","Component","Header","className","src","alt","placeholder","DemoApp","calendarEvents","prevState","map","bacground","handleEvent","info","eventObj","eventUnic","find","a","allDay","jsEvent","preventDefault","filter","todo","handleDateClick","arg","timeZone","start","date","end","Date","now","dayEl","style","backgroundColor","handleClickOpen","localStorage","getItem","JSON","parse","setItem","stringify","defaultView","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","listPlugin","events","dateClick","eventClick","header","left","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.458b060b.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nexport default class FormDialog extends React.Component {\n  state = {\n    mapOnInfo: { \n      fullWidth: true,\n      setFullWidth: true,\n      color: 'white',\n      changeBacground: 'black',\n      title: '',\n    }\n  }\n\n  handleSubmit = () => {\n    const { handleChangeEvent } = this.props;\n    const { mapOnInfo } = this.state;\n    console.log(mapOnInfo)\n    handleChangeEvent(mapOnInfo);\n  }\n    \n  handlecolorChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      mapOnInfo: {\n        fullWidth: true,\n        setFullWidth: true,\n        color: 'black',\n        title: '',\n        changeBacground: value,\n      },\n    })\n  }\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      mapOnInfo: {\n        fullWidth: true,\n        setFullWidth: true,\n        color: 'black',\n        changeBacground: 'white',\n        [name]: value,\n      },\n    });\n  }\n\n  handleFullWidthChange = (event) => {\n    this.setState({\n      mapOnInfo: {\n        fullWidth: true,\n        color: 'black',\n        changeBacground: 'white',\n        title: '',\n        setFullWidth: event.target.checked,\n      },\n    })\n  }\n\n  render() {\n    const { handleClose, setOpen, handleChangeEvent, fullWidth, color, handleDelete } = this.props;\n\n    return (\n      <div>\n        <Dialog \n          handleChangeEvent={handleChangeEvent}\n          open={setOpen} \n          onClose={handleClose} \n          fullWidth={fullWidth}\n          color={color}\n          aria-labelledby=\"max-width-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">New Event</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Edit event\n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Eddit name\"\n              onChange={this.handleChange}\n              value={this.state.title}\n              name=\"title\"\n              type=\"text\"\n              fullWidth\n            />\n             <form \n              onCange={this.handleSubmit}\n              noValidate>\n              <FormControl>\n                <InputLabel htmlFor=\"max-width\">color</InputLabel>\n                <Select\n                  value={color}\n                  onChange={this.handlecolorChange}\n                  inputProps={{\n                    name: 'max-width',\n                    id: 'max-width',\n                  }}\n                >\n                  <MenuItem value={false}>false</MenuItem>\n                  <MenuItem value=\"xs\">blue</MenuItem>\n                  <MenuItem value=\"sm\">red</MenuItem>\n                  <MenuItem value=\"md\">white</MenuItem>\n                  <MenuItem value=\"lg\">yellow</MenuItem>\n                  <MenuItem value=\"xl\">green</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControlLabel\n                control={\n                  <Switch checked={this.fullWidth} onChange={this.handleFullWidthChange} value=\"title\" />\n                }\n                label=\"Full width\"\n              />\n            </form>\n          </DialogContent>\n          <DialogActions>\n            <Button \n            onClick={() => handleDelete()} \n            color=\"primary\">\n              Delete\n            </Button>\n            <Button \n              onClick={this.handleSubmit}\n              color=\"primary\"\n            >\n              Subscribe\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => (\n  <div>\n    <header className=\"header\">\n      <div className=\"header__search__input\">\n        <img\n          src=\"img/icon_search.svg\"\n          alt=\"search\"\n          className=\"header__search\"\n        />\n        <input\n          name=\"search\"\n          type=\"text\"\n          className=\"n__header__input\"\n          placeholder=\"Search transactions, invoices or help\"\n        />\n      </div>\n\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/SupportIocn.svg\" />\n      <img alt=\"path\" className=\"header__planet\" src=\"img/Path_9.svg\" />\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/Path_3.svg\" />\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/Divider.svg\" />\n      <p className=\"header__name\">John Doe</p>\n      <img alt=\"planet\" className=\"header__planet\" src=\"img/Path_26.svg\" />\n      <img alt=\"planet\" className=\"header__avatar\" src=\"img/Avatar@2x.png\" />\n    </header>\n    <div className=\"main\" />\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport FormDialog from './FormDialog';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport FullCalendar from '@fullcalendar/react';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport Header from './Header';\n\nimport './App.css';\n\nexport default class DemoApp extends React.Component {\n  state = {\n    setOpen: false,\n    open: false, \n    calendarEvents: [],\n    id: '',\n    title: '',\n  }\n\n  componentWillMount() {\n      if (localStorage.getItem('calendarEvents')) {\n        this.setState({\n          calendarEvents: JSON.parse(localStorage.getItem('calendarEvents')),\n        });\n      }\n    }\n  \n    componentDidUpdate() {\n      localStorage.setItem('calendarEvents', JSON.stringify(this.state.calendarEvents));\n    }\n\n  handleChangeEvent = (mapOnInfo) => {\n    this.setState((prevState) => {\n      const calendarEvents = prevState.calendarEvents\n        .map(event => (event.id === prevState.id\n          ? {\n            ...event,\n            title: mapOnInfo.title,\n            bacground: mapOnInfo.changeBacground,\n            \n          }\n          : event));\n      return {\n        setOpen: false,\n        calendarEvents,\n      };\n    })\n  }\n\n  handleEvent = (info) => {\n    const eventObj = info.event;\n    const id = this.state.calendarEvents.map(eventUnic => eventUnic.id === +info.event.id ? eventUnic.id : '').find(a => a === +info.event.id);\n      if (eventObj.allDay) {\n        this.setState({\n          setOpen: true,\n          id,\n          })\n        info.jsEvent.preventDefault();\n      } \n  }\n\n  handleDelete = () => {\n    this.setState(prevState => ({\n      setOpen: false,\n      calendarEvents: prevState.calendarEvents.filter(todo => todo.id !== prevState.id),\n    }));\n  }\n\n  handleDateClick = (arg) => {\n    this.setState(prevState => ({\n      calendarEvents: [\n        ...prevState.calendarEvents,\n        {\n          timeZone: 'local',\n          title: prevState.title,\n          start: arg.date,\n          allDay: arg.allDay,\n          end: new Date(),\n          id: Date.now(),\n          bacground: arg.dayEl.style.backgroundColor = 'blue',\n        },\n      ],\n    }));\n  }\n\n  handleClickOpen = () => {\n    this.setState({\n      setOpen: true,\n    })\n  }\n\n  handleClose = () =>{\n    this.setState({\n      setOpen: false,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <FullCalendar \n          defaultView=\"dayGridMonth\" \n          plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin]}\n          events={this.state.calendarEvents} \n          dateClick={this.handleDateClick}\n          eventClick={this.handleEvent}\n          header={{\n            left: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',\n          }}\n        />\n        <FormDialog \n          handleChangeEvent={this.handleChangeEvent}\n          handleClose={this.handleClose} \n          id={this.state.calendarEvents.map(event => event.id)} \n          setOpen={this.state.setOpen}\n          handleDelete={this.handleDelete}\n        />\n        {/* <button type=\"submit\" onClick={this.handleDelete}>delete</button> */}\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}